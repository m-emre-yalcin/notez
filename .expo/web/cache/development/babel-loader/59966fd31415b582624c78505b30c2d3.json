{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport RefreshControl from \"react-native-web/dist/exports/RefreshControl\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Switch from \"react-native-web/dist/exports/Switch\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Colors, DebugInstructions, Header, LearnMoreLinks, ReloadInstructions } from 'react-native/Libraries/NewAppScreen';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar Section = function Section(_ref) {\n  var children = _ref.children,\n      title = _ref.title;\n  var isDarkMode = true;\n  return _jsxs(View, {\n    style: styles.sectionContainer,\n    children: [_jsx(Text, {\n      style: [styles.sectionTitle, {\n        color: isDarkMode ? Colors.white : Colors.black\n      }],\n      children: title\n    }), _jsx(Text, {\n      style: [styles.sectionDescription, {\n        color: isDarkMode ? Colors.light : Colors.dark\n      }],\n      children: children\n    })]\n  });\n};\n\nvar Home = function Home(_ref2) {\n  var navigation = _ref2.navigation;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      refreshing = _useState2[0],\n      setRefreshing = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      count = _useState4[0],\n      setCount = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      modalVisible = _useState6[0],\n      setModalVisible = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      isEnabled = _useState8[0],\n      setIsEnabled = _useState8[1];\n\n  var _React$useState = React.useState('Useless Text'),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      text = _React$useState2[0],\n      onChangeText = _React$useState2[1];\n\n  var toggleSwitch = function toggleSwitch() {\n    return setIsEnabled(function (previousState) {\n      return !previousState;\n    });\n  };\n\n  var onRefresh = React.useCallback(function () {\n    setRefreshing(true);\n    setTimeout(function () {\n      setRefreshing(false);\n    }, 2000);\n  }, []);\n  return _jsxs(ScrollView, {\n    contentInsetAdjustmentBehavior: \"automatic\",\n    refreshControl: _jsx(RefreshControl, {\n      refreshing: refreshing,\n      onRefresh: onRefresh\n    }),\n    children: [_jsx(Header, {}), _jsx(Modal, {\n      animationType: \"slide\",\n      visible: modalVisible,\n      transparent: true,\n      presentationStyle: \"overFullScreen\",\n      onRequestClose: function onRequestClose() {\n        Alert.alert('Modal has been closed.');\n        setModalVisible(!modalVisible);\n      },\n      children: _jsx(View, {\n        style: styles.centeredView,\n        children: _jsxs(View, {\n          style: styles.modalView,\n          children: [_jsx(Text, {\n            style: styles.modalText,\n            children: \"Hello World!\"\n          }), _jsx(Pressable, {\n            style: [styles.button, styles.buttonClose],\n            onPress: function onPress() {\n              return setModalVisible(!modalVisible);\n            },\n            children: _jsx(Text, {\n              style: styles.textStyle,\n              children: \"Hide Modal\"\n            })\n          })]\n        })\n      })\n    }), _jsx(View, {\n      style: {\n        paddingLeft: 20,\n        paddingRight: 20,\n        paddingBottom: 10,\n        flex: 1\n      },\n      children: _jsx(Button, {\n        title: \"Show Modal\",\n        onPress: function onPress() {\n          return setModalVisible(true);\n        }\n      })\n    }), _jsx(View, {\n      style: {\n        paddingLeft: 20,\n        paddingRight: 20,\n        paddingBottom: 10,\n        flex: 1\n      },\n      children: _jsx(Button, {\n        accessibilityLabel: \"Unaccessary blue button\",\n        title: \"You clicked \" + count + \" times\",\n        onPress: function onPress() {\n          return setCount(count + 1);\n        },\n        color: \"crimson\"\n      })\n    }), _jsx(View, {\n      style: {\n        paddingLeft: 20,\n        paddingRight: 20,\n        paddingBottom: 10,\n        flex: 1\n      },\n      children: _jsx(Button, {\n        title: \"Go to About\",\n        onPress: function onPress() {\n          return navigation.navigate('About', {\n            name: 'Kamil'\n          });\n        },\n        color: \"lightslategrey\"\n      })\n    }), _jsxs(View, {\n      style: {\n        paddingLeft: 20,\n        paddingRight: 20,\n        paddingBottom: 10,\n        flex: 1\n      },\n      children: [_jsx(TextInput, {\n        style: {\n          height: 40,\n          margin: 12,\n          borderWidth: 1,\n          padding: 10\n        },\n        onChangeText: onChangeText,\n        value: text,\n        disableFullscreenUI: true,\n        keyboardType: \"email-address\"\n      }), _jsx(Switch, {\n        trackColor: {\n          false: '#767577',\n          true: '#81b0ff'\n        },\n        thumbColor: isEnabled ? '#f5dd4b' : '#f4f3f4',\n        ios_backgroundColor: \"#3e3e3e\",\n        onValueChange: toggleSwitch,\n        value: isEnabled\n      })]\n    }), _jsxs(View, {\n      style: {\n        backgroundColor: Colors.black\n      },\n      children: [_jsxs(Section, {\n        title: \"Step One\",\n        children: [\"Edit \", _jsx(Text, {\n          style: styles.highlight,\n          children: \"App.js\"\n        }), \" to change this screen and then come back to see your edits.\"]\n      }), _jsx(Section, {\n        title: \"See Your Changes\",\n        children: _jsx(ReloadInstructions, {})\n      }), _jsx(Section, {\n        title: \"Debug\",\n        children: _jsx(DebugInstructions, {})\n      }), _jsx(Section, {\n        title: \"Learn More\",\n        children: \"Read the docs to discover what to do next:\"\n      }), _jsx(LearnMoreLinks, {})]\n    })]\n  });\n};\n\nvar styles = StyleSheet.create({\n  sectionContainer: {\n    marginTop: 32,\n    paddingHorizontal: 24\n  },\n  sectionTitle: {\n    fontSize: 24,\n    fontWeight: '600'\n  },\n  sectionDescription: {\n    marginTop: 8,\n    fontSize: 18,\n    fontWeight: '400'\n  },\n  highlight: {\n    fontWeight: '700'\n  },\n  centeredView: {\n    flex: 1,\n    marginTop: 50,\n    width: '100%'\n  },\n  modalView: {\n    margin: 20,\n    backgroundColor: 'white',\n    borderRadius: 10,\n    padding: 35,\n    alignItems: 'center',\n    shadowOffset: {\n      width: 20,\n      height: 20\n    },\n    shadowOpacity: 0.1,\n    elevation: 2\n  },\n  button: {\n    borderRadius: 5,\n    padding: 10,\n    margin: 10,\n    elevation: 2\n  },\n  buttonClose: {\n    backgroundColor: '#2196F3'\n  },\n  textStyle: {\n    color: 'white',\n    fontWeight: 'bold',\n    textAlign: 'center'\n  },\n  modalText: {\n    marginBottom: 15,\n    textAlign: 'center'\n  }\n});\nexport default Home;","map":{"version":3,"sources":["S:/Projects (my)/notez/src/screens/home.tsx"],"names":["React","useState","Colors","DebugInstructions","Header","LearnMoreLinks","ReloadInstructions","Section","children","title","isDarkMode","styles","sectionContainer","sectionTitle","color","white","black","sectionDescription","light","dark","Home","navigation","refreshing","setRefreshing","count","setCount","modalVisible","setModalVisible","isEnabled","setIsEnabled","text","onChangeText","toggleSwitch","previousState","onRefresh","useCallback","setTimeout","Alert","alert","centeredView","modalView","modalText","button","buttonClose","textStyle","paddingLeft","paddingRight","paddingBottom","flex","navigate","name","height","margin","borderWidth","padding","false","true","backgroundColor","highlight","StyleSheet","create","marginTop","paddingHorizontal","fontSize","fontWeight","width","borderRadius","alignItems","shadowOffset","shadowOpacity","elevation","textAlign","marginBottom"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\r\nimport type {Node} from 'react';\r\nimport {\r\n  RefreshControl,\r\n  ScrollView,\r\n  StyleSheet,\r\n  Text,\r\n  Button,\r\n  TextInput,\r\n  Switch,\r\n  Alert,\r\n  Modal,\r\n  Pressable,\r\n  View,\r\n  useColorScheme,\r\n} from 'react-native';\r\nimport {\r\n  Colors,\r\n  DebugInstructions,\r\n  Header,\r\n  LearnMoreLinks,\r\n  ReloadInstructions,\r\n} from 'react-native/Libraries/NewAppScreen';\r\n\r\nconst Section = ({children, title}): Node => {\r\n  const isDarkMode = true;\r\n  return (\r\n    <View style={styles.sectionContainer}>\r\n      <Text\r\n        style={[\r\n          styles.sectionTitle,\r\n          {\r\n            color: isDarkMode ? Colors.white : Colors.black,\r\n          },\r\n        ]}>\r\n        {title}\r\n      </Text>\r\n      <Text\r\n        style={[\r\n          styles.sectionDescription,\r\n          {\r\n            color: isDarkMode ? Colors.light : Colors.dark,\r\n          },\r\n        ]}>\r\n        {children}\r\n      </Text>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst Home = ({navigation}): Node => {\r\n  const [refreshing, setRefreshing] = useState(false);\r\n  const [count, setCount] = useState(0);\r\n  const [modalVisible, setModalVisible] = useState(false);\r\n  const [isEnabled, setIsEnabled] = useState(false);\r\n  const [text, onChangeText] = React.useState('Useless Text');\r\n  const toggleSwitch = () => setIsEnabled(previousState => !previousState);\r\n  const onRefresh = React.useCallback(() => {\r\n    setRefreshing(true);\r\n    setTimeout(() => {\r\n      setRefreshing(false);\r\n    }, 2000);\r\n  }, []);\r\n\r\n  return (\r\n    <ScrollView\r\n      contentInsetAdjustmentBehavior=\"automatic\"\r\n      refreshControl={\r\n        <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />\r\n      }>\r\n      <Header />\r\n\r\n      <Modal\r\n        animationType=\"slide\"\r\n        visible={modalVisible}\r\n        transparent={true}\r\n        presentationStyle=\"overFullScreen\"\r\n        onRequestClose={() => {\r\n          Alert.alert('Modal has been closed.');\r\n          setModalVisible(!modalVisible);\r\n        }}>\r\n        <View style={styles.centeredView}>\r\n          <View style={styles.modalView}>\r\n            <Text style={styles.modalText}>Hello World!</Text>\r\n            <Pressable\r\n              style={[styles.button, styles.buttonClose]}\r\n              onPress={() => setModalVisible(!modalVisible)}>\r\n              <Text style={styles.textStyle}>Hide Modal</Text>\r\n            </Pressable>\r\n          </View>\r\n        </View>\r\n      </Modal>\r\n\r\n      <View\r\n        style={{\r\n          paddingLeft: 20,\r\n          paddingRight: 20,\r\n          paddingBottom: 10,\r\n          flex: 1,\r\n        }}>\r\n        <Button title=\"Show Modal\" onPress={() => setModalVisible(true)} />\r\n      </View>\r\n      <View\r\n        style={{\r\n          paddingLeft: 20,\r\n          paddingRight: 20,\r\n          paddingBottom: 10,\r\n          flex: 1,\r\n        }}>\r\n        <Button\r\n          accessibilityLabel=\"Unaccessary blue button\"\r\n          title={`You clicked ${count} times`}\r\n          onPress={() => setCount(count + 1)}\r\n          color=\"crimson\"\r\n        />\r\n      </View>\r\n      <View\r\n        style={{\r\n          paddingLeft: 20,\r\n          paddingRight: 20,\r\n          paddingBottom: 10,\r\n          flex: 1,\r\n        }}>\r\n        <Button\r\n          title=\"Go to About\"\r\n          onPress={() => navigation.navigate('About', {name: 'Kamil'})}\r\n          color=\"lightslategrey\"\r\n        />\r\n      </View>\r\n      <View\r\n        style={{\r\n          paddingLeft: 20,\r\n          paddingRight: 20,\r\n          paddingBottom: 10,\r\n          flex: 1,\r\n        }}>\r\n        <TextInput\r\n          style={{height: 40, margin: 12, borderWidth: 1, padding: 10}}\r\n          onChangeText={onChangeText}\r\n          value={text}\r\n          disableFullscreenUI={true}\r\n          keyboardType=\"email-address\"\r\n        />\r\n        <Switch\r\n          trackColor={{false: '#767577', true: '#81b0ff'}}\r\n          thumbColor={isEnabled ? '#f5dd4b' : '#f4f3f4'}\r\n          ios_backgroundColor=\"#3e3e3e\"\r\n          onValueChange={toggleSwitch}\r\n          value={isEnabled}\r\n        />\r\n      </View>\r\n\r\n      <View\r\n        style={{\r\n          backgroundColor: Colors.black,\r\n        }}>\r\n        <Section title=\"Step One\">\r\n          Edit <Text style={styles.highlight}>App.js</Text> to change this\r\n          screen and then come back to see your edits.\r\n        </Section>\r\n        <Section title=\"See Your Changes\">\r\n          <ReloadInstructions />\r\n        </Section>\r\n        <Section title=\"Debug\">\r\n          <DebugInstructions />\r\n        </Section>\r\n        <Section title=\"Learn More\">\r\n          Read the docs to discover what to do next:\r\n        </Section>\r\n        <LearnMoreLinks />\r\n      </View>\r\n    </ScrollView>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  sectionContainer: {\r\n    marginTop: 32,\r\n    paddingHorizontal: 24,\r\n  },\r\n  sectionTitle: {\r\n    fontSize: 24,\r\n    fontWeight: '600',\r\n  },\r\n  sectionDescription: {\r\n    marginTop: 8,\r\n    fontSize: 18,\r\n    fontWeight: '400',\r\n  },\r\n  highlight: {\r\n    fontWeight: '700',\r\n  },\r\n\r\n  // modal styles\r\n  centeredView: {\r\n    flex: 1,\r\n    marginTop: 50,\r\n    width: '100%',\r\n  },\r\n  modalView: {\r\n    margin: 20,\r\n    backgroundColor: 'white',\r\n    borderRadius: 10,\r\n    padding: 35,\r\n    alignItems: 'center',\r\n    shadowOffset: {\r\n      width: 20,\r\n      height: 20,\r\n    },\r\n    shadowOpacity: 0.1,\r\n    elevation: 2,\r\n  },\r\n  button: {\r\n    borderRadius: 5,\r\n    padding: 10,\r\n    margin: 10,\r\n    elevation: 2,\r\n  },\r\n  buttonClose: {\r\n    backgroundColor: '#2196F3',\r\n  },\r\n  textStyle: {\r\n    color: 'white',\r\n    fontWeight: 'bold',\r\n    textAlign: 'center',\r\n  },\r\n  modalText: {\r\n    marginBottom: 15,\r\n    textAlign: 'center',\r\n  },\r\n});\r\n\r\nexport default Home;\r\n"]},"metadata":{},"sourceType":"module"}